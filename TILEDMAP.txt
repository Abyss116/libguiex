Examining the map format
In our second tutorial we shall take a look at the map format used by Tiled. Here's the what the contents look like for the file we just created:

<?xml version="1.0" ?>
<map orientation="orthogonal" width="32" height="32" tilewidth="24" tileheight="24">
  <tileset firstgid="1" name="Sewers" tilewidth="24" tileheight="24">
    <image source="tiledweb/files/tiles_pipes.png"/>
  </tileset>
  <layer name="Layer 0">
    <data encoding="base64" compression="gzip">
      H4sIAAAAAAAAAO3NoREAMAgEsLedAfafE4+s6l0jolNJiif18tt/Fj8AAMC9ARtYg28AEAAA
    </data>
  </layer>
</map>

This is an example of a minimal useful map file. Such a map file will have at least one tileset and at least one layer. Note that the information you filled in when you created the map is all stored in attributes of the map element.
The same goes for the tileset. Note that the tile spacing, which we set to 0, is not stored. This is because 0 is the default, and assumed when it's left out. Many attributes have default values.
Hint: While Tiled itself doesn't offer you a way to change the parameters you entered when creating the map yet, it is easy to change them yourself. For example when you decide to switch to a larger tile size or to rename your tileset image. This is one of the advantages of using XML.
Global tile IDs

A thing to note about the tileset is the firstgid attribute. The map layer data is an array of 32-bit integers storing global tile ids. Global means that they span the possibly multiple tilesets that the map is using. Each tileset internally uses local tile ids, and the firstgid attributes specifies how the local ids are mapped to global ids. Namely, a tile with id A in the tileset will be referred to with a number equal to firstgid+A in the layer data.
Using the layer data

The data tag of a map layer in a standard TMX file contains an encoded and compressed array of GID's.

<?xml version="1.0" ?>
<map orientation="orthogonal" width="32" height="32" tilewidth="24" tileheight="24">
 <tileset firstgid="1" name="Sewers" tilewidth="24" tileheight="24">
   <image source="tiledweb/files/tiles_pipes.png"/>
 </tileset>
 <layer name="Layer 0">
   <data encoding="base64" compression="gzip">
     H4sIAAAAAAAAAO3NoREAMAgEsLedAfafE4+s6l0jolNJiif18tt/Fj8AAMC9ARtYg28AEAAA
   </data>
 </layer>
</map>

In order to get the list of GIDs from the data tag, you need to first base64 decode the string, then gunzip the resulting data if the compression attribute is set to "gzip" as in the above example. Finally, you can read 4 bytes at a time for each GID from the beginning of the data stream until the end. The GIDs are arranged from left to right and top to bottom. For example, if you have a map with a width of 4 and a height of 3, then the GIDs in the data stream will be in the following order
(0,0) (1,0) (2,0) (3,0) (0,1) (1,1) (2,1) (3,1) (0,2) (1,2) (2,2) (3,2)
The 32-bit integer that represents the GID is stored using little-endian byte ordering, i.e., the least significant byte is stored first.

Example code in C++:
          const int gid = data[i] |
              data[i + 1] << 8 |
              data[i + 2] << 16 |
              data[i + 3] << 24;

The goal of this section will be to explain how to convert this obscure string of data into a usable array of TileId's.
Keep the questions coming! Asking us questions is the best way to let us know which things are not quite understood yet and how our editor is used.